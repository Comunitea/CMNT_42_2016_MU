=== modified file 'sale/sale.py'
--- sale/sale.py	2010-04-08 13:39:40 +0000
+++ sale/sale.py	2010-05-03 11:03:57 +0000
@@ -417,8 +417,6 @@
             for line in o.order_line:
                 if (line.state in states) and not line.invoiced:
                     lines.append(line.id)
-            if not lines:
-                 raise osv.except_osv(_('Warning'),_('Invoice cannot be created for this Sale Order due to one of the following reasons:\n1.The state is not in %s!\n2.The Sale Order Lines are Invoiced!')%(states,))
             created_lines = self.pool.get('sale.order.line').invoice_line_create(cr, uid, lines)
             if created_lines:
                 invoices.setdefault(o.partner_id.id, []).append((o, created_lines))
@@ -462,10 +460,27 @@
     
     def action_invoice_end(self, cr, uid, ids, context={}):
         for order in self.browse(cr, uid, ids, context=context):
+            #
+            # Update the sale order lines state (and invoiced flag)
+            #
             for line in order.order_line:
-                if line.state == 'exception':
-                    self.pool.get('sale.order.line').write(cr, uid, [line.id], {'state': 'confirmed'}, context=context)
-            
+                #
+                # Check if lines are invoiced (if they have asociated invoice
+                # lines from non-cancelled invoices)
+                #
+                invoiced = False
+                for iline in line.invoice_lines:
+                    if iline.invoice_id and iline.invoice_id.state == 'cancel':
+                        continue
+                    else:
+                        invoiced = True
+                # Compute the new state of the line
+                state = (line.state == 'exception') and 'confirmed' or line.state
+                # Update the line
+                self.pool.get('sale.order.line').write(cr, uid, [line.id], {'invoiced': invoiced, 'state': state})
+            #
+            # Update the sale order state
+            #
             if order.state == 'invoice_except':
                 self.write(cr, uid, [order.id], {'state' : 'progress'}, context=context)
             

